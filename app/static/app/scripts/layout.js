// Generated by CoffeeScript 1.8.0
(function() {
  var count, i, textareas;

  textareas = document.getElementsByTagName("textarea");

  count = textareas.length;

  i = 0;

  while (i < count) {
    textareas[i].onkeydown = function(e) {
      var s;
      if (e.keyCode === 9 || e.which === 9) {
        e.preventDefault();
        s = this.selectionStart;
        this.value = this.value.substring(0, this.selectionStart) + "\t" + this.value.substring(this.selectionEnd);
        this.selectionEnd = s + 1;
      }
    };
    i++;
  }

  $(document).ready(function() {
    console.log("resizing");
    $('textarea').autosize();
    return console.log($("textarea"));
  });

  angular.module("continue").controller("LayoutCtrl", [
    "$scope", "Auth", "Alert", function($scope, Auth, Alert) {
      $scope.search = function() {
        var areas, tags;
        areas = $scope.tags_to_string($scope.areas_tags);
        tags = $scope.tags_to_string($scope.tags_tags);
        $("input[name=areas]").val(areas);
        $("input[name=tags]").val(tags);
        document.getElementById('search-form').submit();
        $("input").val("");
      };
      $scope.tags_to_string = function(input_tags) {
        var areas, tag;
        if (input_tags) {
          areas = [
            (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = input_tags.length; _i < _len; _i++) {
                tag = input_tags[_i];
                _results.push(tag.text);
              }
              return _results;
            })()
          ];
          areas = areas.join(",");
          return areas;
        }
        return "";
      };
      $("input[name='q'], input[name='secret_key']").keyup(function(e) {
        if (e.which === 13) {
          $scope.search();
        }
      });
      $scope.profile = {};
      $scope.scrollTop = 0;
      angular.element($(window)).bind("scroll", function() {
        $scope.scrollTop = $(window).scrollTop();
        return $scope.$apply();
      });
      return Auth.fetch_profile().then(function(response) {
        Auth.store_profile(response[0]);
        $scope.profile = Auth.get_profile();
        return $scope.photo = Auth.get_profile().social_account_photo;
      });
    }
  ]).directive("areaSettingForm", [
    "Auth", "Alert", function(Auth, Alert) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var validate;
          validate = function() {
            var tag, _i, _len, _ref;
            _ref = scope.interested_areas_tags;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              if (!/^\d{5}$/.test(tag.text)) {
                return false;
              }
            }
            return true;
          };
          return scope.submit = function() {
            var profile, tag, zip_codes, _i, _len, _ref;
            if (!validate()) {
              Alert.show_error("Zip code can only contain 5 numeric digits.", 2000);
              return;
            }
            zip_codes = [];
            _ref = scope.interested_areas_tags;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              zip_codes.push(tag.text);
            }
            scope.interested_areas = zip_codes.join();
            console.log(scope.interested_areas);
            Alert.show_msg("Submitting ...");
            profile = Auth.get_profile();
            profile.primary_area = scope.primary_area;
            profile.interested_areas = scope.interested_areas;
            profile.already_set = true;
            return profile.$save().$then(function(response) {
              scope.hide_area_setting = true;
              return Alert.show_msg("Your data is saved.");
            });
          };
        }
      };
    }
  ]).filter("truncate", function() {
    return function(input, max) {
      return input.slice(0, max);
    };
  }).directive("transaction", [
    "Transaction", function(Transaction) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var transaction_id;
          transaction_id = attrs["transactionId"];
          return scope.transaction = Transaction.$find(transaction_id);
        }
      };
    }
  ]);

}).call(this);
