// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module("continue").filter("requested", function() {
    return function(user_id, item) {
      var requester, requesters_id;
      requesters_id = [
        (function() {
          var _i, _len, _ref, _results;
          _ref = item.requesters;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            requester = _ref[_i];
            _results.push(requester.id);
          }
          return _results;
        })()
      ];
      if (__indexOf.call(requesters_id, user_id) >= 0) {
        return true;
      }
      return false;
    };
  }).filter("previously_owned", function() {
    return function(user_id, item) {
      return __indexOf.call(item.previous_owners, user_id) >= 0;
    };
  }).directive("postOverview", [
    "PrivateMessage", function(PrivateMessage) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var owner_id, post_id;
          scope.items = [];
          post_id = attrs["postId"];
          owner_id = attrs['ownerId'];
          element.find("[contact-button]").css({
            "display": ""
          });
          return scope.contact = function() {
            return PrivateMessage.compose(owner_id, post_id, scope.items);
          };
        }
      };
    }
  ]).directive("autoExpand", function() {
    "<div auto-expand data=\"<the input variable>\" init-width=\"100px\"\n    min-size=\"20\">\n    ...\n    <input tyle='text' ng-model=\"<the input variable>\">\n</div>";
    return {
      restrict: "AE",
      scope: {
        data: "=",
        minSize: "@",
        initWidth: "@"
      },
      link: function(scope, element, attrs) {
        var auto_expand, input;
        if (scope.minSize === void 0) {
          scope.minSize = 7;
        }
        if (scope.initWidth === void 0) {
          scope.initWidth = "80px";
        }
        auto_expand = function(data) {
          var size;
          console.log("auto_expand");
          size = Math.floor(data.toString().length / 5) * 5 + 6;
          if (data === "Tall") {
            console.log("data = ", data);
            console.log(size);
          }
          if (size > scope.minSize) {
            input.css({
              "width": "auto"
            });
            return input.attr({
              "size": size
            });
          }
        };
        input = element.find("input");
        return scope.$watch("data", function() {
          if (input.length === 0) {
            input = element.find("input");
          }
          if (!scope.data) {
            input.css({
              "width": scope.initWidth,
              "max-width": "500px"
            });
          }
          if (scope.data) {
            return auto_expand(scope.data);
          }
        });
      }
    };
  }).directive("clickToExpand", function() {
    return {
      restrict: "A",
      scope: true,
      link: function(scope, element, attrs) {
        var max_height, target, trigger;
        scope.expanded = false;
        max_height = "0px";
        if ("maxHeight" in attrs) {
          max_height = attrs['maxHeight'];
        }
        trigger = element.find("[click-to-expand-trigger]");
        trigger.css({
          "cursor": "pointer"
        });
        target = element.find("[click-to-expand-target]");
        target.css({
          'max-height': max_height,
          "display": "none"
        });
        return trigger.on("click", function() {
          if (!scope.expanded) {
            target.css({
              "max-height": "",
              "display": "inherit"
            });
            scope.expanded = true;
            return scope.$apply();
          } else if (scope.expanded) {
            target.css({
              "max-height": max_height,
              "display": "none"
            });
            scope.expanded = false;
            return scope.$apply();
          }
        });
      }
    };
  }).directive("clickToShow", function() {
    " template\n<div click-to-show>\n  <div click-to-show-trigger></div>\n  <div click-to-show-target></div>\n</div>\nclicking the '[click-to-show-trigger]' will show and hide\n'[click-to-show-trigger]'.";
    return {
      restrict: "A",
      scope: true,
      link: function(scope, element, attrs) {
        var target, trigger;
        scope.click_to_show_is_show = false;
        trigger = element.find("[click-to-show-trigger]");
        target = element.find("[click-to-show-target]");
        target.css({
          "display": "none"
        });
        return trigger.on("click", function(e) {
          if (__indexOf.call(e.target.className.split(" "), "tag") >= 0) {
            return;
          }
          if (!scope.click_to_show_is_show) {
            target.css({
              "display": ""
            });
          } else if (scope.click_to_show_is_show) {
            target.css({
              "display": "none"
            });
          }
          scope.click_to_show_is_show = !scope.click_to_show_is_show;
          return scope.$apply();
        });
      }
    };
  }).directive("togglePartialImg", function() {
    return {
      restrict: "A",
      link: function(scope, element, attrs) {
        var max_height, unwatch;
        max_height = "300px";
        if ("maxHeight" in attrs) {
          max_height = attrs['maxHeight'];
        }
        return unwatch = scope.$watch("item.pic", function() {
          var container;
          container = element.find(".image-container");
          container.css({
            "overflow": "hidden",
            "max-height": max_height
          });
          container.on("click", function() {
            if (container.css("max-height") !== "none") {
              return container.css({
                "max-height": "none"
              });
            } else {
              return container.css({
                "max-height": max_height
              });
            }
          });
          return unwatch();
        });
      }
    };
  }).directive("followButtonArea", [
    "Auth", "Alert", function(Auth, Alert) {
      return {
        restrict: "A",
        link: function(scope, element, attrs) {
          var area;
          area = attrs['area'];
          scope.is_followed = function(area) {
            var area_regex;
            area_regex = RegExp(area);
            return area_regex.test(scope.profile.interested_areas);
          };
          return scope.follow = function(area) {
            var profile;
            if (!scope.is_followed(area)) {
              profile = Auth.get_profile();
              profile.interested_areas += "," + area;
              return profile.$save().$then(function(response) {
                return Alert.show_msg("Successfully followed " + area);
              });
            }
          };
        }
      };
    }
  ]).directive("angularItemEditMenu", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/angular-item-edit-menu.html",
      link: function(scope, element, attrs) {
        scope.refresh = false;
        if (__indexOf.call(attrs, "refresh") >= 0) {
          return scope.refresh = attrs["refresh"];
        }
      }
    };
  }).directive("itemEditButton", [
    "ItemEditor", "$rootScope", function(ItemEditor, $rootScope) {
      return {
        restrict: "A",
        link: function(scope, element, attrs) {
          var item_id, refresh;
          if ("itemId" in attrs) {
            item_id = attrs['itemId'];
          }
          refresh = false;
          if ("refresh" in attrs) {
            refresh = attrs['refresh'];
          }
          return scope.show_editor = function() {
            var promise;
            if (item_id) {
              promise = ItemEditor.begin(item_id, refresh);
            } else {
              scope.item.is_new = false;
              promise = ItemEditor.begin(scope.item, refresh);
            }
            return promise.then(function(response) {
              var existing_items, i, _i, _ref;
              if (scope.view === "post") {
                console.log("We are in view post!!!");
                existing_items = scope.post.items;
                console.log("scope.post.items", scope.post.items);
                for (i = _i = 0, _ref = existing_items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                  console.log("existing_items[" + i + "]", existing_items[i]);
                  if (existing_items[i].id === response.id) {
                    existing_items[i] = response;
                  }
                }
                return console.log("After the update, scope.post.items = ", scope.post.items);
              }
            });
          };
        }
      };
    }
  ]).directive("dropDownMenu", [
    "$timeout", function($timeout) {
      return {
        restrict: "A",
        link: function(scope, element, attrs) {
          var target, trigger;
          trigger = element.find("[drop-down-menu-trigger]");
          target = element.find("[drop-down-menu-target]");
          target.css({
            "position": "absolute",
            "display": "none",
            "z-index": 1
          });
          trigger.on("click", function(e) {
            target.css({
              "display": ""
            });
            return console.log("clicked!");
          });
          return $("html").click(function(a) {
            if (!$.contains(element[0], a.target)) {
              return target.css({
                "display": "none"
              });
            }
          });
        }
      };
    }
  ]).directive("postItemDeleteButton", [
    "Item", function(Item) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var item_id, post_id;
          item_id = attrs["itemId"];
          post_id = attrs["postId"];
          scope.show_double_check = false;
          scope.double_check = function() {
            console.log("double_check scope", scope);
            return scope.show_double_check = true;
          };
          return scope.del = function() {
            var item;
            console.log("del");
            console.log("del scope", scope);
            scope.show_double_check = false;
            return item = Item.$find(item_id).$then(function(response) {
              item.remove_from_post = post_id;
              return item.save();
            });
          };
        }
      };
    }
  ]).directive("transferMenu", [
    "Item", function(Item) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var item, item_id;
          scope.new_owner = void 0;
          item_id = attrs["itemId"];
          item = Item.$find(item_id);
          scope.transfer = function() {
            item.new_owner = scope.new_owner;
            console.log("transferring", scope.item);
            return item.save();
          };
          return scope.select = function(requester_id, requester_name) {
            return scope.new_owner = {
              id: requester_id,
              username: requester_name
            };
          };
        }
      };
    }
  ]).directive("itemTitle", function() {
    return {
      restrct: "E",
      scope: {
        item: "="
      },
      templateUrl: "/static/app/directives/item-title.html",
      link: function(scope, element, attrs) {
        return console.log("itemTitle");
      }
    };
  }).directive("angularItemOverviewHeader", function() {
    return {
      restrct: "E",
      templateUrl: "/static/app/directives/angular-item-overview-header.html"
    };
  }).directive("angularItemOverview", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/angular-item-overview.html"
    };
  }).directive("angularFieldText", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/angular-field-text.html",
      replace: true,
      scope: {},
      link: function(scope, element, attrs) {
        scope.widget = "text";
        scope.title = attrs["title"];
        scope.value = attrs['value'];
        if ("widget" in attrs) {
          scope.widget = attrs['widget'];
        }
        if ('unit' in attrs) {
          return scope.unit = attrs['unit'];
        }
      }
    };
  });

}).call(this);
