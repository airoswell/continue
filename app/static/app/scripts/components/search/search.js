// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module("continue").controller("SearchResultsCtrl", [
    "$scope", "Post", "Alert", function($scope, Post, Alert) {
      $scope.scroll_to_post = function(id) {
        var top;
        top = $("#post-" + id).offset().top;
        $("html, body").animate({
          scrollTop: top - 100
        });
        return true;
      };
      $scope.layout = {
        loading: {
          posts: false,
          feeds: false
        }
      };
      return $scope.load_posts = function() {
        $scope.layout.loading.posts = true;
        if (!$scope.posts) {
          $scope.posts = Post.search({
            "start": $scope.init_post_num,
            "q": $scope.q,
            "area": $scope.area
          });
        } else {
          $scope.posts = $scope.posts.fetch({
            "start": $scope.posts.start,
            "q": $scope.q,
            "area": $scope.area
          });
        }
        return $scope.posts.$then(function(response) {
          var item, post, _i, _len, _results;
          if ($scope.posts.start === 0) {
            $scope.posts.start = parseInt($scope.init_post_num) + response.length;
          } else {
            $scope.posts.start = parseInt($scope.posts.start) + response.length;
          }
          _results = [];
          for (_i = 0, _len = response.length; _i < _len; _i++) {
            post = response[_i];
            if (post.tags) {
              if (typeof post.tags === "string") {
                post.tags = post.tags.split(",");
              }
            } else {
              post.tags = [];
            }
            _results.push((function() {
              var _j, _len1, _ref, _results1;
              _ref = post.items;
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                item = _ref[_j];
                if (item.tags) {
                  if (typeof item.tags === "string") {
                    _results1.push(item.tags = item.tags.split(","));
                  } else {
                    _results1.push(item.tags = []);
                  }
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        }).$asPromise().then(function() {
          return $scope.layout.loading.posts = false;
        }, function() {
          return Alert.show_msg("All posts are loaded above.");
        });
      };
    }
  ]).directive("searchPostOverview", [
    "PrivateMessage", function(PrivateMessage) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var owner_id, post_id;
          scope.items = [];
          post_id = attrs["postId"];
          owner_id = attrs['ownerId'];
          element.find("[contact-button]").css({
            "display": ""
          });
          return scope.contact = function() {
            return PrivateMessage.compose(owner_id, post_id, scope.items);
          };
        }
      };
    }
  ]).directive("searchItemOverview", function() {
    return {
      restrict: "A",
      scope: true,
      link: function(scope, element, attrs) {
        scope.item_id = attrs['itemId'];
        return scope.add_item = function() {
          var _ref;
          console.log(scope.item_id);
          if (!(_ref = scope.item_id, __indexOf.call(scope.items, _ref) >= 0)) {
            return scope.items.push(scope.item_id);
          } else {
            return scope.items.splice(scope.items.indexOf(scope.item_id), 1);
          }
        };
      }
    };
  }).directive("clickToShowTrigger", function() {
    return {
      restrict: "A",
      link: function(scope, element, attrs) {
        var click_to_show;
        scope.expanded = false;
        click_to_show = element.find("[click-to-show]");
        click_to_show.css({
          "display": "none"
        });
        return element.on("click", function(e) {
          if (!scope.expanded) {
            click_to_show.css({
              "display": "inherit"
            });
          } else if (scope.expanded && !("click-to-show" in e.target.attributes)) {
            click_to_show.css({
              "display": "none"
            });
          }
          scope.expanded = !scope.expanded;
          return scope.$apply();
        });
      }
    };
  }).directive("clickToExpand", function() {
    return {
      restrict: "A",
      link: function(scope, element, attrs) {
        var max_height, target, trigger;
        scope.expanded = false;
        max_height = attrs['maxHeight'];
        trigger = element.find("[click-to-expand-trigger]");
        target = element.find("[click-to-expand-target]");
        return trigger.on("click", function() {
          if (!scope.expanded) {
            target.css({
              "max-height": ""
            });
            return scope.expanded = true;
          } else if (scope.expanded) {
            target.css({
              "max-height": max_height,
              "overflow": "hidden"
            });
            return scope.expanded = false;
          }
        });
      }
    };
  }).directive("transferMenu", [
    "Item", function(Item) {
      return {
        restrict: "A",
        link: function(scope, element, attrs) {
          var item, item_id;
          scope.new_owner = void 0;
          item_id = attrs["itemId"];
          item = Item.$find(item_id).$then(function(response) {
            return console.log(item);
          });
          scope.transfer = function() {
            item.new_owner = scope.new_owner;
            console.log("transferring", scope.item);
            item.save();
            return location.reload();
          };
          return scope.select = function(requester_id, requester_name) {
            return scope.new_owner = {
              id: requester_id,
              username: requester_name
            };
          };
        }
      };
    }
  ]);

}).call(this);
