// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module("continue").controller("SearchResultsCtrl", [
    "$scope", "Post", "Alert", "InfiniteScroll", function($scope, Post, Alert, InfiniteScroll) {
      var infinite_scroll_posts;
      $scope.scroll_to_post = function(id) {
        var top;
        top = $("#post-" + id).offset().top;
        $("html, body").animate({
          scrollTop: top - 100
        });
        return true;
      };
      $scope.layout = {
        loading: {
          posts: false
        }
      };
      infinite_scroll_posts = new InfiniteScroll(Post);
      return $scope.load_posts = function() {
        $scope.layout.loading.posts = true;
        infinite_scroll_posts.config({
          model_types: ["Post"],
          init_starts: $scope.init_post_num,
          extra_params: {
            q: $scope.q,
            tags: $scope.tags,
            areas: $scope.areas,
            secret_key: $scope.secret_key
          }
        });
        $scope.posts = infinite_scroll_posts.load($scope.posts);
        return $scope.posts.$asPromise().then(function(response) {
          infinite_scroll_posts.success_handler(response);
          return $scope.layout.loading.posts = false;
        }, function() {
          return Alert.show_msg("All posts are downloaded ...");
        });
      };
    }
  ]).directive("searchPostOverview", [
    "PrivateMessage", function(PrivateMessage) {
      return {
        restrict: "A",
        scope: true,
        link: function(scope, element, attrs) {
          var owner_id, post_id;
          scope.items = [];
          post_id = attrs["postId"];
          owner_id = attrs['ownerId'];
          element.find("[contact-button]").css({
            "display": ""
          });
          return scope.contact = function() {
            return PrivateMessage.compose(owner_id, post_id, scope.items);
          };
        }
      };
    }
  ]).directive("itemOverview", function() {
    return {
      restrict: "A",
      scope: true,
      link: function(scope, element, attrs) {
        scope.item_id = attrs['itemId'];
        return scope.add_item = function() {
          var _ref;
          if (!(_ref = scope.item_id, __indexOf.call(scope.items, _ref) >= 0)) {
            return scope.items.push(scope.item_id);
          } else {
            return scope.items.splice(scope.items.indexOf(scope.item_id), 1);
          }
        };
      }
    };
  }).directive("clickToExpand", function() {
    return {
      restrict: "A",
      link: function(scope, element, attrs) {
        var max_height, target, trigger;
        scope.expanded = false;
        max_height = attrs['maxHeight'];
        trigger = element.find("[click-to-expand-trigger]");
        target = element.find("[click-to-expand-target]");
        return trigger.on("click", function() {
          if (!scope.expanded) {
            target.css({
              "max-height": ""
            });
            return scope.expanded = true;
          } else if (scope.expanded) {
            target.css({
              "max-height": max_height,
              "overflow": "hidden"
            });
            return scope.expanded = false;
          }
        });
      }
    };
  });

}).call(this);
