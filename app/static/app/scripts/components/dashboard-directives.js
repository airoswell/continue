// Generated by CoffeeScript 1.8.0
(function() {
  angular.module("worldsheet").directive("postOverview", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/post-overview.html"
    };
  }).directive("dashboardItemOverview", [
    "Album", "Alert", function(Album, Alert) {
      return {
        restrict: "E",
        scope: true,
        templateUrl: "/static/app/directives/dashboard-item-overview.html",
        link: function(scope, element, attrs) {
          return element.on("click", function(e) {
            if ("trigger" in e.target.attributes) {
              scope.expand(scope.item);
              return scope.$apply();
            }
          });
        }
      };
    }
  ]).directive("angularItemUpdate", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/angular-item-update.html"
    };
  }).directive("inputText", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/input-text.html",
      scope: {
        data: "=",
        label: "=",
        placeHolder: "=",
        inputClass: "=",
        containerClass: "="
      }
    };
  }).directive("inputDropdown", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/input-dropdown.html",
      scope: {
        data: "=",
        label: "=",
        choices: "=",
        containerClass: "=",
        transfer: "=",
        user: "="
      },
      link: function(scope, element, attrs) {
        var trigger;
        scope.dropdown = false;
        trigger = element.find("[trigger]");
        trigger.on("click", function() {
          var min_width;
          scope.dropdown = true;
          min_width = element.width();
          console.log("min_width", min_width);
          trigger.find("[target]").css({
            "min-width": min_width
          });
          return scope.$apply();
        }).on("mouseleave", function() {
          scope.dropdown = false;
          return scope.$apply();
        });
        return scope.select = function(option) {
          return scope.data = option;
        };
      }
    };
  }).directive("inputTextarea", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/input-textfield.html",
      scope: {
        data: "=",
        label: "=",
        containerClass: "@",
        inputClass: "@",
        placeHolder: "="
      }
    };
  }).directive("inputDate", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/input-date.html",
      replace: true,
      scope: {
        date: "=",
        label: "@"
      }
    };
  }).directive("inputNum", function() {
    return {
      restrict: "E",
      templateUrl: "/static/app/directives/input-num.html",
      scope: {
        num: "=",
        label: "@"
      },
      link: function(scope, element) {
        return scope.click = function() {
          element.find("input").focus();
          return true;
        };
      }
    };
  }).directive("donationSettingForm", function() {
    return {
      restrict: "A"
    };
  }).directive("areaSettingForm", [
    "Auth", "Alert", function(Auth, Alert) {
      return {
        restrict: "A",
        link: function(scope, element, attrs) {
          var validate;
          validate = function() {
            var tag, _i, _len, _ref;
            _ref = scope.interested_areas_tags;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              if (!/^\d{5}$/.test(tag.text)) {
                return false;
              }
            }
            return true;
          };
          return scope.submit_areas_setting = function() {
            var profile, tag, zip_codes, _i, _len, _ref;
            if (!validate()) {
              Alert.show_error("Zip code can only contain 5 numeric digits.", 2000);
              return;
            }
            zip_codes = [];
            _ref = scope.interested_areas_tags;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              zip_codes.push(tag.text);
            }
            scope.interested_areas = zip_codes.join();
            console.log(scope.interested_areas);
            Alert.show_msg("Submitting ...");
            profile = Auth.get_profile();
            profile.primary_area = scope.primary_area;
            profile.interested_areas = scope.interested_areas;
            profile.already_set = true;
            return profile.save().$then(function(response) {
              scope.hide_area_setting = true;
              return Alert.show_msg("Your data is saved.");
            });
          };
        }
      };
    }
  ]);

}).call(this);
