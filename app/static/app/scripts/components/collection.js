// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module("continue").controller("collectionCtrl", [
    "$scope", "Post", "Item", "Feed", "Timeline", "Alert", "InfiniteScroll", "Auth", "Album", function($scope, Post, Item, Feed, Timeline, Alert, InfiniteScroll, Auth, Album) {
      var infinite_scroll_items, search;
      $scope.layout = {
        creating_new_item: false,
        display_tab: "items",
        show_items_search_results: false,
        loading: {
          "items": true
        }
      };
      $scope.tags = [];
      $scope.load_first_items = function() {
        if ($scope.items == null) {
          Alert.show_msg("Downloading your data ...");
          return $scope.items = Item.$search({
            num_of_records: 8
          }).$then(function(response) {
            this.tags_handler();
            this.start = this.length;
            Alert.show_msg("Download is finished.");
            return $scope.layout.loading.items = false;
          }, function(e) {
            if (e.$response.status === 404) {
              return Alert.show_msg("No data is found.");
            } else {
              return Alert.show_error("There is problem retrieving your data.");
            }
          });
        }
      };
      $scope.load_first_items();
      infinite_scroll_items = new InfiniteScroll(Item);
      $scope.load_items = function() {
        console.log("$scope.items", $scope.items);
        console.log("$scope.items.length", $scope.items.length);
        infinite_scroll_items.config({
          model_types: ["Item"],
          init_starts: $scope.items.length
        });
        $scope.layout.loading.items = true;
        $scope.items = infinite_scroll_items.load($scope.items);
        return $scope.items.$asPromise().then(function(response) {
          infinite_scroll_items.success_handler(response);
          return $scope.layout.loading.items = false;
        }, function() {
          return Alert.show_msg("All items are downloaded ...");
        });
      };
      search = function(params) {
        Alert.show_msg("Searching...");
        $scope.layout.show_items_search_results = true;
        return $scope.items_search_results = Item.search(params);
      };
      $scope.search_by_tag = function(tag) {
        var index, params, tags;
        if (__indexOf.call($scope.tags, tag) >= 0) {
          index = $scope.tags.indexOf(tag);
          $scope.tags.splice(index, 1);
        } else {
          $scope.tags.push(tag);
        }
        if ($scope.tags.length > 0) {
          tags = $scope.tags.join(",");
          params = {
            "tags": tags
          };
          return search(params);
        } else {
          return $scope.items_search_results = [];
        }
      };
      $scope.is_searched = function(tag) {
        return __indexOf.call($scope.tags, tag) >= 0;
      };
      return $scope.create_item = function() {
        var item;
        if ($scope.layout.creating_new_item) {
          return;
        }
        if ($scope.items == null) {
          $scope.items = [];
        }
        $scope.layout.creating_new_item = true;
        $scope.layout.display_tab = "items";
        item = Item.$build(Item.init);
        item.owner = Auth.get_profile().id;
        item.is_new = true;
        $scope.items.splice(0, 0, item);
        $("html, body").animate({
          scrollTop: $("#items-display").offset().top - 100
        });
        return true;
      };
    }
  ]);

}).call(this);
