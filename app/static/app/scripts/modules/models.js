// Generated by CoffeeScript 1.8.0
(function() {
  'user strict';
  angular.module('continue.models', ['restmod', 'continue.auth']).config(function(restmodProvider) {
    return restmodProvider.rebase({
      $config: {
        primaryKey: "id",
        style: "ams",
        urlPrefix: "/app/"
      }
    });
  }).factory("Model", [
    'restmod', "Alert", "Auth", function(restmod, Alert, Auth) {
      var copy, next_page, prev_page, save;
      save = function(self, successHandler, errorHandler) {
        if (!self.is_valid()) {
          Alert.show_error("Your input contains invalid data.");
          return false;
        }
        self.loading = true;
        if ("process_data" in self) {
          self.process_data();
        }
        Alert.show_msg("Saving your data to database ...");
        return self.$save().$then(function(response) {
          Alert.show_msg("Your data is saved! You may need to refresh ...");
          self.loading = false;
          if (successHandler != null) {
            return successHandler(self, response);
          }
        }, function(errors) {
          self.loading = false;
          Alert.show_error("There are problems processing your data.", 10000);
          if (errorHandler != null) {
            return errorHandler(self, errors);
          }
        });
      };
      next_page = function(self) {
        var refresh;
        Alert.show_msg("Loading ...");
        refresh = self.$refresh({
          page: self.page + 1,
          num_of_records: self.num_of_records
        });
        return refresh.$asPromise().then(function(response) {
          self.page += 1;
          return this.promise;
        }, function(error) {
          return Alert.show_msg("That's all the items.");
        });
      };
      prev_page = function(self) {
        var refresh;
        Alert.show_msg("Loading ...");
        if (self.page > 1) {
          refresh = self.$refresh({
            page: self.page - 1,
            num_of_records: self.num_of_records
          });
          return refresh.$then(function(response) {
            return self.page -= 1;
          });
        }
      };
      copy = function(self, obj) {
        "Copy properties of <obj> to the record itself.";
        var key;
        if ((obj == null) || typeof obj !== "object") {
          return obj;
        }
        for (key in obj) {
          self[key] = obj[key];
        }
        return self;
      };
      return {
        create: function(path) {
          return restmod.model(path).mix({
            $extend: {
              Record: {
                loading: false,
                save: function(successHandler, errorHandler) {
                  return save(this, successHandler, errorHandler);
                },
                copy: function(obj, property) {
                  if (property == null) {
                    return copy(this, obj);
                  } else {
                    if (property in obj) {
                      this[property] = obj[property];
                    }
                    return this;
                  }
                }
              },
              Collection: {
                path: path,
                loading: false,
                page: 1,
                start: 0,
                num_of_records: 2,
                next_page: function() {
                  return next_page(this);
                },
                prev_page: function() {
                  return prev_page(this);
                },
                fetch: function(params) {
                  var self;
                  self = this;
                  this.loading = true;
                  return this.$fetch(params);
                }
              },
              Model: {
                transform: function(obj) {
                  var record;
                  record = this.$build(this.init);
                  return record.copy(obj);
                }
              }
            }
          });
        }
      };
    }
  ]).factory('Post', [
    "$q", "Model", "Item", "Auth", function($q, Model, Item, Auth) {
      var add_item, condition_choices, init, is_valid, search;
      condition_choices = ["New", "Like new", "Good", "Functional", "Broken"];
      init = {
        title: "",
        area: "",
        detail: "",
        items: [],
        is_new: true
      };
      add_item = function(self) {
        var item;
        if ('items' in self) {
          item = Item.$build(Item.init);
          item.owner = Auth.get_user().user_id;
          item.is_new = true;
          self['items'].push(item);
          return item;
        }
      };
      is_valid = function(self) {
        var item, _i, _len, _ref;
        if (!self.title || !self.area) {
          return false;
        }
        _ref = self.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.title.length === 0) {
            return false;
          }
        }
        return true;
      };
      search = function(self, params) {
        var $then, posts;
        posts = self.$search(params);
        return $then = posts.$then(function(response) {
          var i, item, post, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = posts.length; _i < _len; _i++) {
            post = posts[_i];
            _results.push((function() {
              var _j, _ref, _results1;
              _results1 = [];
              for (i = _j = 0, _ref = post.items.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
                item = post.items[i];
                _results1.push(post.items[i] = Item.transform(item));
              }
              return _results1;
            })());
          }
          return _results;
        });
      };
      return Model.create('/posts/').mix({
        $extend: {
          Record: {
            add_item: function() {
              return add_item(this);
            },
            is_valid: function() {
              return is_valid(this);
            },
            initialize: function() {
              return initialize(this);
            }
          },
          Model: {
            search: function(params) {
              return search(this, params);
            },
            init: init
          }
        }
      });
    }
  ]).factory("Item", [
    "Model", function(Model) {
      var availability_choices, condition_choices, init, is_valid, utilization_choices, visibility_choices;
      condition_choices = ["New", "Like new", "Good", "Functional", "Broken"];
      visibility_choices = ["Public", "Private", "Ex-owners"];
      availability_choices = ["Available", "In use", "Lent", "Given away", "Disposed"];
      utilization_choices = ["Frequent", "Sometimes", "Rarely", "Never"];
      init = {
        title: "",
        quantity: 1,
        condition: "Good",
        utilization: "Sometimes",
        visibility: "Private",
        availability: "Available",
        status: "",
        new_status: "",
        expanded: false,
        is_new: false
      };
      is_valid = function(self) {
        if (!self.title) {
          false;
        }
        return true;
      };
      return Model.create("/items/").mix({
        $extend: {
          Record: {
            condition_choices: condition_choices,
            availability_choices: availability_choices,
            visibility_choices: visibility_choices,
            utilization_choices: utilization_choices,
            initialize: function() {
              return initialize(this);
            },
            is_valid: function() {
              return is_valid(this);
            },
            process_data: function() {
              var self;
              console.log("processing data");
              self = this;
              if ("new_owner" in self) {
                if (self["new_owner"]) {
                  self.owner = self['new_owner'].id;
                  return self.visibility = "Ex-owners";
                }
              }
            }
          },
          Model: {
            init: init
          }
        },
        histories: {
          hasMany: "History"
        }
      });
    }
  ]).factory("History", [
    "Model", function(Model) {
      return Model.create("/histories/");
    }
  ]).factory("Feed", [
    "Model", function(Model) {
      return Model.create("/feeds/").mix({
        $extend: {
          record: ""
        }
      });
    }
  ]).factory("Transaction", [
    "Model", function(Model) {
      return Model.create("/transactions/").mix({
        $hooks: {
          "before-request": function(_req) {
            return _req.url += "/";
          }
        },
        $extend: {
          Record: {
            is_valid: function() {
              return true;
            },
            process_data: function() {
              this.giver = this.giver.id;
              this.receiver = this.receiver.id;
              return this.item = this.item.id;
            },
            revoke: function() {
              this.status = "Revoked";
              return this.save();
            },
            reject: function() {
              this.status = "Rejected";
              return this.save();
            },
            receive: function() {
              this.status = "Received";
              return this.save();
            }
          }
        }
      });
    }
  ]);

}).call(this);
